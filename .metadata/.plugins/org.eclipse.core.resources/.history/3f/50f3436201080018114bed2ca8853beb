import java.util.Scanner;

public class Elevator {
	int[] totalFloor;
	int currentFloor;
	
	public Elevator() {
		this.setFloor();
	}
	
	public void setFloor() {
		int top, bottom;
		Scanner scan = new Scanner(System.in);
		int[] ground = null;
		int[] basement = null;
		
		System.out.print("최고층을 숫자로 입력하세요 >> "); // 입력을 n > 0 으로만 받게 해야하고, 0 을 받으면 지상층 안만들게 해야 함.
		try {
			top = Integer.parseInt(scan.next());
			if(top > 0) {
				ground = new int[top];
				for(int i = 0; i < top; i++) {
					ground[i] = i+1;
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		System.out.print("최저층을 숫자로 입력하세요 >> "); // 입력을 n < 0 으로만 받게 해야하고, 0 을 받으면 지하층 안만들게 해야 함.
		try {
			bottom = Integer.parseInt(scan.next());
			if(bottom > 0) {
			
				basement = new int[bottom];
				int temp = bottom;
				
				for(int i = 0; i < bottom ; i++) {
					basement[i] = temp*(-1);
					temp = temp - 1;
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		mergeFloor(ground, basement);			// 둘다 0입력받으면 안생기게 체크해야 할듯.
		this.currentFloor = this.totalFloor[checkFloorIndex(1)];	// 1층을 기본 층으로 ...
	}
	
	private void mergeFloor(int[] ground, int[] basement) {
		int total = ground.length + basement.length;
		int gl = ground.length;
		int bl = basement.length;
		int resultIndex = 0;
		int[] result = new int[total];
		
		for(int i = 0; i < bl; i++) {
			result[resultIndex] = basement[i];
			resultIndex += 1;
		}
		for(int i = 0; i < gl; i++) {
			result[resultIndex] = ground[i];
			resultIndex += 1;
		}	
		this.totalFloor = result;
	}

	private int moveUp(int currentFloor) {
		int currentFloorIndex = checkFloorIndex(currentFloor);
		
		if (currentFloorIndex < this.totalFloor.length-1)
			currentFloorIndex++;
		else
			System.out.println("최고층입니다.");
		
		return this.totalFloor[currentFloorIndex];
		
	}
	
	private int moveDown(int currentFloor) {
		int currentFloorIndex = checkFloorIndex(currentFloor);
		
		if (currentFloorIndex != 0)
			currentFloorIndex--;
		else
			System.out.println("최저층입니다.");
		
		return this.totalFloor[currentFloorIndex];
	}
	
	private int checkFloorIndex(int currentFloor) {
		int[] temp = this.totalFloor;
		for(int i = 0; i < temp.length; i++) {
			if(temp[i] == currentFloor)
				return i;
		}
		return 0;
	}
	
	// 승객에게 운행층 정보를 제공
	private void printTotalFloor() {
		System.out.print("[");
		for(int i = 0; i < this.totalFloor.length; i++) {
			if(this.totalFloor[i] < 0)
				System.out.print("B"+this.totalFloor[i]*(-1));
			else
				System.out.print(this.totalFloor[i]);
			
			if(i != this.totalFloor.length - 1)
				System.out.print(", ");
			else
				System.out.println("]");
		}
	}
	
	// 지하층을 입력할때 ( -1 은 입력 되는데 b1 은 입력 안됨.)
	public void elevatorRun() {
		System.out.print("운행층 >> "); this.printTotalFloor();
		System.out.println("현재층 >> "+this.currentFloor);
		System.out.println("======================================");
		System.out.print("이동할 층 >> ");
		
		Scanner sc = new Scanner(System.in);
//		int selectedFloor;
//		if(sc.nextLine() =="^[bB]\\d") {
//			selectedFloor = 
//		}
		int selectedFloor = Integer.parseInt(sc.next());
		
		if (selectedFloor == this.currentFloor) {
			System.out.println("현재층입니다.");
		}
		else if(selectedFloor > this.currentFloor) {
			// 최상층인지 확인하고
			// 목적지까지 운행해야한다.
			for(;;) {
				if(selectedFloor != this.currentFloor) {
					int arrivedFloor = moveUp(this.currentFloor);
					this.currentFloor = this.totalFloor[checkFloorIndex(arrivedFloor)];
					System.out.println("상승중 >>"+this.currentFloor);
				}
				else
					break;
			}
		}
		else if(selectedFloor < this.currentFloor) {
			// 최저층인지 확인하고
			// 목적지까지 운행한다.
			for(;;) {
				if(selectedFloor != this.currentFloor) {
					int arrivedFloor = moveDown(this.currentFloor);
					this.currentFloor = this.totalFloor[checkFloorIndex(arrivedFloor)];
					System.out.println("하강중 >>"+this.currentFloor);
				}
				else
					break;
			}
		}
		else if(selectedFloor == 0) {
			System.out.println("없어 0층은!!");
		}
	}
}


/** 
* ++ 랜덤으로 손님을 받아서 운행...?
*/
